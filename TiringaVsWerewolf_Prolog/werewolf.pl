%%%%%%%%%%%%%%%%%%%%%%%%%%%

:- include('util.pl').
:- include('positions.pl').

% 0 == LOST THE GAME
% 1 == CONTINUE THE GAME

moveWerewolf(M, TPosition, WPosition, R) :-
    allPositions(M, WPosition, PL),
    filterPositions(M, PL, WPosition, FL),
    euclideanList(FL, TPosition, EL),
    sort(2, <, EL, [H|_]), % Review the list order.
    [NX,NY,_] = H,
    setElement(M, WPosition, " ", NM1),
    setElement(NM1, [NX,NY], "W", NM2),
    (equalsPosition([NX,NY], TPosition) -> R = [0, NM2];
    R = [1, NM2]).


allPositions(M, Position, PL) :- 
    leftPosition(M, Position, LP),
    rightPosition(M, Position, RP),
    upPosition(M, Position, UP),
    downPosition(M, Position, DP),
    PL = [LP, RP, UP, DP].

filterPositions(_, [], _, NPL) :- NPL = [].
filterPositions(M, [H|T], Position, NPL) :-
    (not(equalsPosition(H, Position)), checkIsNotExit(M, H) -> 
        filterPositions(M, T, Position, R), append([H], R, NPL);
    filterPositions(M, T, Position, NPL)).

euclideanDistance([TX, TY], [WX,WY], R) :- 
    DX is float(TX) - float(WX),
    DY is float(TY) - float(WY),
    SX is DX*DX,
    SY is DY*DY,
    ED is sqrt(SX + SY),
    R = [WX,WY,ED].

euclideanList([], _, R) :- R = [].
euclideanList([H|T], TPosition, R) :- 
    euclideanList(T, TPosition, EL), 
    euclideanDistance(TPosition, H, ED),
    append([ED], EL, R).

/*test :- 

    M1=[["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
        ["T", " ", " ", " ", "#", "#", " ", "#", "#", "#", "#", "#", " ", " ", " ", "#"],
        ["#", "#", "#", " ", " ", " ", " ", "#", "#", "#", "#", "#", " ", "#", " ", "#"],
        ["#", "#", "#", " ", "#", "#", " ", " ", " ", " ", " ", " ", " ", "#", " ", "#"],
        ["#", "#", "#", " ", "#", "#", "#", "#", " ", "#", "#", "#", "#", "#", " ", "#"],
        ["#", "#", "#", " ", "#", "#", "#", "#", " ", "#", "#", "#", "#", "#", " ", "#"],
        ["#", "#", "#", " ", " ", " ", " ", "#", " ", "#", "#", "#", "#", "#", " ", "#"],
        ["#", "#", "#", " ", "#", "#", " ", "#", " ", "#", "#", "#", "#", "#", " ", "#"],
        ["#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#"],
        ["#", "#", "#", " ", "#", "#", " ", "#", " ", "#", "#", "#", " ", "#", "#", "#"],
        ["#", "#", " ", " ", "#", "#", " ", "#", " ", "#", "#", "#", " ", "#", "#", "#"],
        ["#", "#", " ", "#", "#", "W", " ", " ", " ", " ", " ", " ", " ", " ", " ", "S"],
        ["#", "#", " ", "#", "#", "#", "#", "#", " ", "#", " ", "#", "#", "#", "#", "#"],
        ["#", "#", " ", "#", "#", "#", "#", " ", " ", "#", " ", "#", "#", "#", "#", "#"],
        ["#", "#", " ", "#", "#", "#", "#", " ", "#", "#", " ", "#", "#", "#", "#", "#"],
        ["#", " ", " ", " ", "#", "#", "#", " ", "#", "#", " ", "#", "#", "#", "#", "#"],
        ["#", " ", "#", " ", "#", " ", " ", " ", "#", "#", " ", "#", "#", "#", "#", "#"],
        ["#", " ", "#", " ", " ", " ", "#", "#", "#", "#", " ", "#", "#", "#", "#", "#"],
        ["#", " ", "#", "#", "#", " ", "#", "#", "#", "#", " ", " ", " ", " ", "#", "#"],
        ["#", " ", "#", "#", "#", " ", " ", " ", " ", " ", " ", "#", "#", " ", "#", "#"],
        ["#", " ", "#", "#", "#", " ", "#", "#", "#", "#", " ", "#", "#", " ", "#", "#"],
        ["#", " ", "#", "#", "#", " ", "#", "#", "#", "#", " ", "#", "#", " ", "#", "#"],
        ["#", " ", "#", "#", "#", " ", "#", "#", "#", "#", " ", " ", " ", " ", "#", "#"],
        ["#", " ", "#", "#", "#", " ", "#", "#", "#", "#", " ", "#", "#", "#", "#", "#"],
        ["#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", "#", "#", "#", "#"],
        ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"]],

    moveWerewolf(M1, [1,0], [1,1], R),

    write(R).*/